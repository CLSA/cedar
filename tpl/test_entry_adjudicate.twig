{##
 # test_entry_adjudicate.twig
 #
 # Extends the base_record template for adjudicating test entries.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 #}
{% extends "base_record.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">

    $( function () {

      $( "#{{ widget.full }}_quit" ).click( function() {
        var args = new Object;
        args.restrict_state_id = 4;
        args.sort_column = "user.name";
        args.restrictions = { "user.name" : { "compare" : "is", "value" : "{{ user_1 }}" } };
        slot_load( {{ slot }}, "assignment", "list", args );
      } ); // end Quit click

      $( "#{{ widget.full }}_prev" ).click( function() {
        {% if 0 == prev_test_entry_id %}
          var args = new Object;
          args.restrict_state_id = 4;
          args.sort_column = "user.name";
          args.restrictions = { "user.name" : { "compare" : "is", "value" : "{{ user_1 }}" } };
          slot_load( {{ slot }}, "assignment", "list", args );
        {% else %}
          slot_load( {{ slot }},
            "{{ widget.subject }}", "{{ widget.name }}",
            { id : {{ prev_test_entry_id }} } );
        {% endif %}
      } ).button( { disabled : 1 == {{ rank }} } ); // end Prev click

      $( "#{{ widget.full }}_next" ).click( function() {
        {% if 0 == next_test_entry_id %}
          var args = new Object;
          args.restrict_state_id = 4;
          args.sort_column = "user.name";
          args.restrictions = { "user.name" : { "compare" : "is", "value" : "{{ user_1 }}" } };
          slot_load( {{ slot }}, "assignment", "list", args );
        {% else %}
          slot_load( {{ slot }},
            "{{ widget.subject }}", "{{ widget.name }}",
            { id : {{ next_test_entry_id }} } );
        {% endif %}
      } ); // end Next click

      $( "#{{ widget.full }}_submit" ).click( function() {
        // submit the adjudication
        if( ajax_push( "{{ widget.subject }}", "submit", { "id": {{ adjudicate_entry_id }} } ) ) {
          $( "#{{ widget.full }}_next" ).button( { disabled : false } );
          $( "#{{ widget.full }}_next" ).click();
        }
      } );// end Submit button click

      function return_test_entry( test_entry_id_list ) {
        $dialog = $( "#{{ widget.full }}__note_dialog" );
        var buttons = new Object;
        buttons.Ok = function() {
          var note = $("#{{ widget.full }}__note").val().trim();
          var wordCount = 0 == note.length ? 0 : note.split(' ').length;
          if( 0 == wordCount ) {
            error_dialog( "Error", "You cannot leave a blank note." );
          } else {
            $dialog.dialog( "close" );
            var args = new Object();
            var success = false;
            for( var i = 0; i < test_entry_id_list.length; i++ ) {
              args.id = test_entry_id_list[i];
              if( ajax_push( "{{ widget.subject }}", "return", args ) ) {
                args = new Object();
                args.note = note;
                args.category = "{{ widget.subject }}";
                args.category_id = test_entry_id_list[i];
                ajax_push( "note", "new", args );
                success = true;
              }
            }
            if( success ) {
              var args = new Object;
              args.restrict_state_id = 4;
              args.sort_column = "user.name";
              args.restrictions = { "user.name" : { "compare" : "is", "value" : "{{ user_1 }}" } };
              slot_load( {{ slot }}, "assignment", "list", args );
            }
          }
        };

        buttons.Cancel = function() {
          $dialog.dialog( "close" );
        };

        var html = "A note is required indicating the reason for returning.";
        html += "<textarea id=\"{{ widget.full }}__note\"></textarea>";

        $dialog.html( html );

        $dialog.dialog( {
          closeOnEscape: true,
          title: "Return Note",
          modal: true,
          dialogClass: "alert",
          width: 450,
          buttons: buttons,
          beforeClose: function( event, ui ) { $(this).html( "" ); },
          open: function( event, ui ) { $( ".ui-dialog-titlebar-close", $(this).parent() ).hide(); }
        } );
      }

      $( "#{{ widget.full }}_return12" ).css( 'white-space','nowrap'
        ).button( 'option', 'label',
        'Return (both)'
        ).click( function() {
          var id_list = [ {{ test_entry_id_1 }}, {{ test_entry_id_2 }} ];
          return_test_entry( id_list );
      } ); // end return12 click

      $( "#{{ widget.full }}_return1" ).css( 'white-space','nowrap'
        ).button( 'option', 'label',
        'Return (' + "{{ user_1 }}".toLowerCase() + ')'
        ).click( function() {
          var id_list = [ {{ test_entry_id_1 }} ];
          return_test_entry( id_list );
      } ); // end return1 click

      $( "#{{ widget.full }}_return2" ).css( 'white-space','nowrap'
        ).button( 'option', 'label',
        'Return (' + "{{ user_2 }}".toLowerCase() + ')'
        ).click( function() {
          var id_list = [ {{ test_entry_id_2 }} ];
          return_test_entry( id_list );
      } ); // end return2 click

      $(':button[id$="quit"]').parent().append(
        $( '[id^="{{ widget.full }}"][id$="_note"]' )
      );

    } );
  </script>

{% endblock javascript %}

{% block record %}

  <div class="spacer"></div>
  <div>
    {% include [ 'test_entry_', test_type, '_adjudicate.twig']|join with test_entry_args %}
  </div>
  <div class="spacer"></div>
  <div id="audio_control">
    {% if recording_data is defined %}
      <table>
        {% set recording_id = 0 %}
        {% for recording in recording_data %}
          <tr>
            <td>
              <audio controls>
                id="{{ widget.full }}__recording__{{ recording_id }}"
                <source src="{{ recording }}" type="audio/wav">
              </audio>
            </td>
          </tr>
          {% set recording_id = recording_id+1 %}
        {% endfor %}
      </table>
    {% endif %}
  </div>
  <div class="spacer"></div>

    {% from 'macros.twig' import confirm_buttons %}
      {{ confirm_buttons( slot, widget.full,
        [ 'return12', 'return1', 'return2', 'submit', 'prev', 'next', 'quit'], '', 'right', true ) }}
    {% from 'macros.twig' import note_widget %}
    {{ note_widget(
         widget.full, "test_entry", test_entry_id_1, false, ["Notes (",user_1|lower,")"]|join ) }}
    {{ note_widget(
         widget.full, "test_entry", test_entry_id_2, false, ["Notes (",user_2|lower,")"]|join ) }}

  <div id="{{ widget.full }}__note_dialog"></div>

{% endblock record %}
