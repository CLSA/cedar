{##
 # test_entry_ranked_word_transcribe.twig
 # 
 # Transcribe a ranked word test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">

    var table_selector = "#{{ widget.full }}__entry_table";

    function configure_ui( do_text ) {

      if( {{ deferred }} || !{{ editable }} ) {
        $( "#{{ parent.full }}__audio_fault" ).prop( "disabled", true );
        $( "#{{ parent.full }}_Defer" ).button( { disabled :  true } );
        $( "#{{ parent.full }}_Reset" ).button( { disabled : true } );
        $( "#{{ widget.full }}_Add" ).button( { disabled : true } );
        $( table_selector + " input" ).each( function() {
          $(this).prop( "disabled", true );
        } );
      } else {
        var numRadio = $( table_selector + ' input:radio' ).length / 3;
        var numYes = $( table_selector + ' input:radio[value="yes"]:checked' ).length;
        var numNo = $( table_selector + ' input:radio[value="no"]:checked' ).length;
        var numVariant = $( table_selector + ' input:radio[value="variant"]:checked' ).length;
        var numEmptyIntrusion = $( table_selector + ' input:text[id$="intrusion"][value=""]' ).length;

        // count number of items with value "yes"
        // count number of items with value "no"
        // count number of items with value "variant"
        // total yes + no + variant == total radio / 3 => enable next button

        // disable the Next and Add buttons if the ranked word entries are incomplete
        // or if there are empty intrusion fields
        var disable = ( numYes + numNo + numVariant ) != numRadio || 0 < numEmptyIntrusion;
        $( "#{{ parent.full }}_Next" ).button( { disabled : disable } );
        $( "#{{ widget.full }}_Add" ).button( { disabled : disable } );

        // disable the Reset button if there is nothing to reset
        $( "#{{ parent.full }}_Reset" ).button( 
          { disabled : 0 == numYes && 0 == numNo && 0 == numVariant } );

        do_text = (typeof do_text == 'undefined') ? true : do_text;
        if( do_text ) {
          // if no radio items are checked, disable all text inputs
          $( table_selector + " input:text" ).each( function() {
              var disable = false;
              if( 0 == numYes && 0 == numNo && 0 == numVariant ) {
                disable = true;
              }
              else {
                if( $(this).prop( "id" ).split( "__" )[1] === "candidate" ) {
                  var id = "#" + $(this).prop( "id" ).split( "__" )[0] + "__variant";
                  disable = !$( id ).prop( "checked" );              
                }
              }
              $(this).prop( "disabled", disable );
          } );
        }
      }
    }

    // overrides the default autocomplete filter function to search only from the beginning
    // of the string
    $.ui.autocomplete.filter = function ( array, term ) {
      var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( term ), "i" );
      return $.grep( array, function ( value ) {
        return matcher.test( value.label || value.value || value );
      } );
    };

    function get_text_complete() {
      var args = new Object();
      args["variant_dictionary_id"] = {{ variant_dictionary_id }};
      args["language"] = "{{ language }}";
      args["words_only"] = 1;
      return ajax_pull( "word", "list", args );
    }

    function update_input_list() {
      $( table_selector + " input:text" ).autocomplete( {
        source: get_text_complete(),
        minLength: 1,
        select: function( event, ui ) {
          $(this).val( ui.item.value );
          // TODO see if latest version of jquery has double enter key bug fixed
          //$(this).trigger( 'change' );
          }
        } )
      .change( function() {

        var candidate = $(this).val().trim().toLowerCase();
        $(this).val( candidate );
        $(this).attr( "value", candidate );
        $(this).removeClass( "candidate primary intrusion variant" );
        if( 0 == candidate.length ) {
          alert( "Blank entries are not permitted" );
          configure_ui();
          return false;
        }  
        var args = new Object();
        var columns = new Object();
        args.id = $(this).prop( "id" ).split("__")[0];
        var is_intrusion = $(this).prop( "id" ).split("__")[1] === "intrusion";
        columns["test_entry_id"] = {{ parent.id }};
        columns["word_id"] = $(this).prop( "name" );
        columns["word_candidate"] = candidate;
        columns["selection"] = is_intrusion ? "" : "variant";
        args.columns = columns;
        
        // push edits
        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {

          // get the classification of the word for coloring
          args.id = {{ test_id }};
          args["language"] = "{{ language }}";
          args["word_candidate"] = candidate;
          var classification = ajax_pull( "test", "classify_word", args );
          if( undefined != classification )
          {
             $(this).addClass( classification );
          }           
          
          // re-enable all radio and variant text inputs
          $( table_selector + " input:radio" ).each( function() {
            $(this).prop( "disabled", false );
            if( $(this).val() === "variant" ) {
              var text_id = table_selector + " input:text[name=" + $(this).prop( "name" ) + "]";
              if( 0 < $(text_id).val().length ) {
                $(text_id).prop( "disabled", false );
              }  
            }
          } );
        }  else {
          alert( "Entry was not accepted, try again." );
          $(this).val( "" );
          $(this).attr( "value", "" );
          $(this).focus();
        }

        configure_ui();
      } );// end text input change  
    }

    $( function () {
      
      update_input_list();
      configure_ui();

      $( "#{{ widget.full }}_Add" ).button( {
        text: false,
        icons: { primary: "ui-icon-plusthick" }
        } )
      .click( function() {
        var args = new Object();
        var columns =  new Object();
        columns["test_entry_id"] = {{ parent.id }};
        args.columns = columns;
        if( ajax_push( "{{ widget.subject }}", "new", args ) ) {
          slot_refresh( {{ slot }} );      
        }
      } ); // end Add button click

       
      // find and handle radio element change events:
      // enable/disable the text entry element depending on
      // which radio button was selected
      $( table_selector + " input:radio" ).change( function() {
        var args = new Object();
        var columns = new Object();
        args.id = $(this).prop( "id" ).split("__")[0];
        columns["test_entry_id"] = {{ parent.id }};
        columns["word_id"] = $(this).prop( "name" );
        columns["selection"] = $(this).val();
        if( columns["selection"] !== "variant" ) {
          columns["word_candidate"] = "";
        }
        args.columns = columns;
        var do_text = true;
        if( ajax_push( "{{ widget.subject }}", "edit", args ) )
        {
          var text_id = table_selector + " input:text[name=" + $(this).prop( "name" ) + "]";
          $(text_id).removeClass( "candidate primary intrusion variant" );
          if( $(this).val() === "variant" ) {
            // disable inputs until the variant is entered
            $( table_selector + " input" ).prop( "disabled", true );
            $(text_id).prop( "disabled", false );
            $(text_id).focus();
            do_text = false;
          } else {
            $(text_id).prop( "disabled", true );
            $(text_id).val( "" );
            // update the value to present state
            $(text_id).attr( "value", "" );
          }
        }

        configure_ui( do_text );
      } );// end radio input change

      $( "#{{ parent.full }}_Reset" ).click( function() {
        // push reset
        if( ajax_push( "{{ parent.subject }}", "reset", { "id": {{ parent.id }} } ) ) {
          // clear all text entries
          $( table_selector + ' input:text' ).each( function() {
            $(this).removeClass( "candidate primary intrusion variant" );
            $(this).val( "" );
            // update the value to present state
            $(this).attr( "value", "" );
            $(this).prop( "disabled", true );
          } );
          // remove table rows added for intrusions
          $( table_selector + ' tr.intrusion' ).remove();
          // clear all radio inputs
          $( table_selector + ' input:radio' ).each( function() {
            $(this).prop( "checked", false );
          } );

          configure_ui();
        }
      } );// end Reset button click

    } );
  </script>

{% endblock javascript %}

{% block widget %}
  
  <div class="spacer"></div>

  <table id="{{ widget.full }}__entry_table">

    <thead>
      <tr>
        <td></td>
        <th>Yes</th>
        <th>No</th>
        <th>Variant</th>
        <td></td>
      </tr>
    </thead>

    <tbody>
    {% for entry in entry_data %}
      
        {% if entry.word is defined %}
        <tr class="ranked_word">  
          <td class="heading">{{ entry.word }}</td>
          <td><input type="radio" 
               id="{{ entry.id }}__yes"
               name="{{ entry.word_id }}"
               value="yes"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'yes' ? "checked" : "" }}></td>
          <td><input type="radio"
               id="{{ entry.id }}__no"
               name="{{ entry.word_id }}" 
               value="no"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'no' ? "checked" : "" }}></td>
          <td><input type="radio"
               id="{{ entry.id }}__variant"
               name="{{ entry.word_id }}"
               value="variant"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'variant' ? "checked" : "" }}></td>
          <td><input type="text"
               id="{{ entry.id }}__candidate"
               name="{{ entry.word_id }}"
               {% if entry.classificatioin is defined %}
                 class="{{ entry.classification }}"
               {% endif %}  
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.classification is defined %}
                 class="{{ entry.classification }}"
               {% endif %}
               value="{{ entry.word_candidate }}"></td>
        </tr>       
        {% else %}
        <tr class="intrusion">
          <td class="heading">INTRUSION</td>
          <td></td><td></td><td></td>
          <td><input type="text"
               id="{{ entry.id }}__intrusion"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.classification is defined %}
                 class="{{ entry.classification }}"
               {% endif %}
               name=""
               value="{{ entry.word_candidate }}"></td>
         </tr>      
        {% endif %}
    {% endfor %}  

      {% if editable == 1 %}
      <tr>
        <td colspan=5 class="button">
            <button class="{{ widget.full }}__add_entry"
              style="float:right"
              disabled
              id="{{ widget.full }}_Add">Add</button>
         </td>      
      </tr>
      {% endif %}

    </tbody>   
  </table>

  <div id="{{ widget.full }}__variant_dialog"></div>

{% endblock widget %}
