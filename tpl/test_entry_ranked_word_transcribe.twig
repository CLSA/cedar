{##
 # test_entry_ranked_word_transcribe.twig
 #
 # Transcribe a ranked word test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">

    var table_selector = "#{{ widget.full }}__entry_table";

    // highlight the row the mouse is over
    $( table_selector + ' tbody tr').mouseover( function() {
      $(this).addClass( "ui-widget-header" );
    } );
    $( table_selector + ' tbody tr').mouseout( function() {
      $(this).removeClass( "ui-widget-header" );
    } );

    function configure_ui( do_text ) {

      if( {{ deferred }} || !{{ editable }} ) {
        $( "#{{ parent.full }}__audio_status" ).prop( "disabled", true );
        $( "#{{ parent.full }}__participant_status" ).prop( "disabled", true );
        $( "#{{ parent.full }}_defer" ).button( { disabled :  true } );
        $( "#{{ parent.full }}_reset" ).button( { disabled : true } );
        $( "#{{ widget.full }}_add" ).button( { disabled : true } );
        $( table_selector + " input" ).each( function() {
          $(this).prop( "disabled", true );
        } );
      } else {
        var numRadio = $( table_selector + ' input:radio' ).length / 3;
        var numYes = $( table_selector + ' input:radio[value="yes"]:checked' ).length;
        var numNo = $( table_selector + ' input:radio[value="no"]:checked' ).length;
        var numVariant = $( table_selector + ' input:radio[value="variant"]:checked' ).length;
        var numEmptyIntrusion = 0;
        $( table_selector + ' input:text[id$="intrusion"]' ).each( function() {
          if( 0 == $(this).val().length ) numEmptyIntrusion++;
        } );

        var has_null_status =
          'NULL' == "{{ audio_status }}" && 'NULL' == "{{ participant_status }}";

        // count number of items with value "yes"
        // count number of items with value "no"
        // count number of items with value "variant"
        // total yes + no + variant == total radio / 3 => enable next button

        // disable the next and add buttons if the ranked word entries are incomplete
        // or if there are empty intrusion fields
        var disable = ( ( numYes + numNo + numVariant ) != numRadio && has_null_status ) ||
                      0 != numEmptyIntrusion;
        $( "#{{ parent.full }}_next" ).button( { disabled : disable } );
        $( "#{{ widget.full }}_add" ).button( { disabled : disable } );

        // disable the reset button if there is nothing to reset
        $( "#{{ parent.full }}_reset" ).button(
          { disabled : 0 == numYes && 0 == numNo && 0 == numVariant && has_null_status } );

        if( 'unavailable' == "{{ audio_status }}" || 'unusable' == "{{ audio_status }}" ||
            'refused' == "{{ participant_status }}" ) {
          $( table_selector + " input" ).each( function() {
            $(this).prop( "disabled", true );
          } );
        } else {
          do_text = (typeof do_text == 'undefined') ? true : do_text;
          if( do_text ) {
            // if no radio items are checked, disable all text inputs
            var disableAll = ( 0 == numYes && 0 == numNo && 0 == numVariant );
            $( table_selector + " input:text" ).each( function() {
              var disable = false;
              if( !disableAll ) {
                if( $(this).prop( "id" ).split( "__" )[1] === "candidate" ) {
                  var id = "#" + $(this).prop( "id" ).replace( "candidate", "variant" );
                  disable = !$( id ).prop( "checked" );
                }
              }
              $(this).prop( "disabled", disableAll ? true : disable );
            } );
          }
        }
      }
    }

    // overrides the default autocomplete filter function to search only from the beginning
    // of the string
    $.ui.autocomplete.filter = function ( array, term ) {
      var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( term ), "i" );
      return $.grep( array, function ( value ) {
        return matcher.test( value.label );
      } );
    };

    function get_variant_text_complete() {
      var args = new Object();
      args["variant_dictionary_id"] = {{ variant_dictionary_id }};
      // words are determined according to typist language restrictions
      args["user_id"] = {{ user_id }};
      args["words_only"] = 1;
      return $.map( ajax_pull( "word", "list", args ), function( value, key ) {
        return {
          label: value,
          value: key
        };
      });
    }

    function get_intrusion_text_complete() {
      var args = new Object();
      args["intrusion_dictionary_id"] = {{ intrusion_dictionary_id }};
      // words are determined according to typist language restrictions
      args["user_id"] = {{ user_id }};
      args["words_only"] = 1;
      return $.map( ajax_pull( "word", "list", args ), function( value, key ) {
        return {
          label: value,
          value: key
        };
      });
    }

    function update_input_list() {

      $( table_selector + ' input:text[id$="candidate"]' ).keypress( function( event ) {
        var keycode = event.keyCode ? event.keyCode : event.which;
        if( 13 == keycode && $(this).autocomplete('widget').is(':visible') ) {
          $(this).autocomplete('close');
        }
      } ).autocomplete( {
        source: get_variant_text_complete(),
        minLength: 1,
        delay: 0,
        select: function( event, ui ) {
          $(this).val( ui.item.label );
          $(this).attr( "value", ui.item.label );
          return false;
        },
        focus: function( event, ui ) {
          $(this).val( ui.item.label );
          $(this).attr( "value", ui.item.label );
          return false;
        },
        close: function( event, ui ) {
          var source = $(this).autocomplete("option").source;
          var candidate = $(this).val();
          var key = null;
          for(var i in source) {
            if( candidate === source[i].label ) {
              key = source[i].value;
              break;
            }
          }
          if( null === key ) return false;
          $(this).trigger( "change",  [ key ]  );
        }
      } );

      $( table_selector + ' input:text[id$="intrusion"]' ).keypress( function( event ) {
        var keycode = event.keyCode ? event.keyCode : event.which;
        if( 13 == keycode && $(this).autocomplete('widget').is(':visible') ) {
          $(this).autocomplete('close');
        }
      } ).autocomplete( {
        source: get_intrusion_text_complete(),
        minLength: 1,
        delay: 0,
        select: function( event, ui ) {
          $(this).val( ui.item.label );
          $(this).attr( "value", ui.item.label );
          return false;
        },
        focus: function( event, ui ) {
          $(this).val( ui.item.label );
          $(this).attr( "value", ui.item.label );
          return false;
        },
        close: function( event, ui ) {
          var needle = $(this).val();
          var haystack = $(this).autocomplete("option").source;
          var key = null;
          for(var i in haystack) {
            if( needle === haystack[i].label ) {
              key = haystack[i].value;
              break;
            }
          }
          if( null === key ) return false;
          $(this).trigger( "change",  [ key ]  );
        }
      } );

      $( table_selector + ' input:text' ).change( function(event, obj) {

        // addresses focus event calling change
        if( undefined === obj ) {
          var needle = $(this).val();
          var haystack = $(this).autocomplete("option").source;
          for(var i in haystack) {
            if( needle === haystack[i].label ) {
              return false;
            }
          }
        }

        var candidate = $(this).val().trim().toLowerCase();
        // we've trimmed and lower-cased the candidate, so update the UI
        $(this).val( candidate );
        // update the value to present state
        $(this).attr( "value", candidate );
        $(this).removeClass( "candidate primary intrusion variant" );
        if( 0 == candidate.length ) {
          alert( "Blank entries are not permitted" );
          configure_ui();
          $(this).focus();
          return false;
        }

        // re-enable all radio and variant text inputs
        $( table_selector + " input:radio" ).each( function() {
          $(this).prop( "disabled", false );
          if( $(this).val() === "variant" ) {
            var text_id = table_selector + ' input:text[id="' +
              $(this).prop( "id" ).replace( "variant", "candidate" ) + '"]';
            if( 0 < $( text_id ).val().length ) {
              $( text_id ).prop( "disabled", false );
            }
          }
        } );

        var args = new Object();
        var columns = new Object();
        var target_entry_id = $(this).prop( "id" ).split( "__" )[0];
        args.id = target_entry_id;
        var is_variant = $(this).prop( "id" ).split( "__" )[1] === "candidate";
        if( undefined !== obj ) {
          columns["word_id"] = obj;
        } else {
          columns["word_candidate"] = candidate;
        }
        if( is_variant ) {
          columns["selection"] = "variant";
          columns["ranked_word_set_id"] = $(this).prop( "name" );
        }
        args.columns = columns;

        // push edits
        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {

          // determine what type of word this is along with its id
          args.id = {{ parent.id }};
          var columns = new Object();
          columns["child_id"] = target_entry_id;
          args.columns = columns;

          var result = ajax_pull( "test_entry", "classify_word", args );
          $(this).addClass( result.classification );

          // if an intrusion, check and add the word if not in the autocomplete source
          if( "intrusion" == result.classification && undefined === obj ) {
            var text_selector = $( table_selector + ' input:text[id$="intrusion"]' );
            var source = text_selector.autocomplete( "option", "source" );
            source.push( { label : result.word, value : result.word_id } );
            text_selector.autocomplete( "option", "source", source );
          }

          configure_ui();

        } else {
          $(this).val( "" );
          $(this).attr( "value", "" );
          if( is_variant ) {
            // by default, select the "no" radio button
            var radio_id = table_selector + ' input:radio[id="' + args.id + '__no"]';
            $( radio_id ).focus();
            $( radio_id ).prop( "checked", true );
            $( radio_id ).change();
          }
        }
      } );// end text input change
    }

    $( function () {

      // note that only non-strict tests can have new entries added for intrusions
      $( "#{{ widget.full }}_add" ).button( {
        text: false,
        icons: { primary: "ui-icon-plusthick" }
        } )
      .click( function() {
        var args = new Object();
        var columns =  new Object();
        columns["test_entry_id"] = {{ parent.id }};
        args.columns = columns;
        if( ajax_push( "{{ widget.subject }}", "new", args ) ) {
          slot_refresh( {{ slot }} );
        }
      } ); // end add button click

      // allow removal of intrusions
      $( table_selector + ' button[id$="intrusion_delete"]' ).button( {
        text: false,
        icons: { primary: "ui-icon-closethick" }
        } )
      .click( function() {
        var id = $(this).prop( "id" ).split("__")[0];
        if( ajax_push( "{{ widget.subject }}", "delete", { "id": id } ) ) {
          slot_refresh( {{ slot }} );
        }
      } ); // end delete button click

      update_input_list();
      configure_ui();

      // find and handle radio element change events:
      // enable/disable the text entry element depending on
      // which radio button was selected
      $( table_selector + " input:radio" ).change( function() {
        var args = new Object();
        var columns = new Object();
        var selection = $(this).val();
        args.id = $(this).prop( "id" ).split("__")[0];
        columns["selection"] = selection;
        if( "variant" !== selection ) {
          columns["word_candidate"] = '';
        }
        args.columns = columns;
        var do_text = true;
        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {
          var text_id =
            table_selector + ' input:text[id="' + args.id + '__candidate"]';
          $( text_id ).removeClass( "candidate primary intrusion variant" );
          if( "variant" === selection ) {
            // disable inputs until the variant is entered
            $( table_selector + " input" ).prop( "disabled", true );
            $( text_id ).prop( "disabled", false );
            $( text_id ).focus();
            do_text = false;
          } else {
            $( text_id ).prop( "disabled", true );
            $( text_id ).val( "" );
            // update the value to present state
            $( text_id ).attr( "value", "" );
          }
        }

        configure_ui( do_text );
      } );// end radio input change
    } );
  </script>

{% endblock javascript %}

{% block widget %}

  <div class="spacer"></div>

  <table id="{{ widget.full }}__entry_table">
    <thead>
      <tr>
        <td></td>
        <th>Yes</th>
        <th>No</th>
        <th>Variant</th>
        <td></td>
      </tr>
    </thead>
    <tbody>
    {% for entry in entry_data %}
        {% if entry.ranked_word_set_word is defined %}
        <tr class="ranked_word">
          <td class="heading" style="width:50px">{{ entry.ranked_word_set_word }}</td>
          <td style="width:30px"><input type="radio"
               id="{{ entry.id }}__yes"
               name="{{ entry.ranked_word_set_id }}"
               value="yes"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'yes' ? "checked" : "" }}/></td>
          <td style="width:30px"><input type="radio"
               id="{{ entry.id }}__no"
               name="{{ entry.ranked_word_set_id }}"
               value="no"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'no' ? "checked" : "" }}/></td>
          <td style="width:30px"><input type="radio"
               id="{{ entry.id }}__variant"
               name="{{ entry.ranked_word_set_id }}"
               value="variant"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {{ entry.selection == 'variant' ? "checked" : "" }}/></td>
          <td style="width:100px"><input type="text"
              style="float:left"
               id="{{ entry.id }}__candidate"
               name="{{ entry.ranked_word_set_id }}"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.word is defined %}
                 value="{{ entry.word }}"
                 {% if entry.classification is defined %}
                   class="{{ entry.classification }}"
                 {% endif %}
               {% else %}
                 { disabled }
               {% endif %}/></td>
        </tr>
        {% else %}
        <tr class="intrusion">
          <td class="heading">INTRUSION</td>
          <td colspan="3"></td>
          <td><input type="text"
              style="float:left"
               id="{{ entry.id }}__intrusion"
               {% if editable == 0 %}
                 { readonly }
               {% endif %}
               {% if entry.word is defined %}
                 value="{{ entry.word }}"
                 {% if entry.classification is defined %}
                   class="{{ entry.classification }}"
                 {% endif %}
               {% endif %}/>
            <button class="{{ widget.full }}__delete_entry"
              style="float:right"
               {% if editable == 0 %}
                 { disabled  }
               {% endif %}
              id="{{ entry.id }}__intrusion_delete">Delete</button>
              </td>
         </tr>
        {% endif %}
    {% endfor %}

      {% if editable == 1 %}
      <tr>
        <td colspan="5" class="button">
            <button class="{{ widget.full }}__add_entry"
              style="float:right"
              disabled
              id="{{ widget.full }}_add">Add</button>
         </td>
      </tr>
      {% endif %}

    </tbody>
  </table>

  <div id="{{ widget.full }}__variant_dialog"></div>

{% endblock widget %}
