{##
 # test_entry_classfication_transcribe.twig
 #
 # Transcribe a classification type test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  {% if editable != 0 %}

    <script type="text/javascript">

      var table_selector = "#{{ widget.full }}__entry_table";

      function configure_ui() {

        var is_deferred = "requested" == "{{ deferred }}";
        var is_submitted = "submitted" == "{{ completed }}";

        if( is_deferred || !{{ editable }} || is_submitted ) {
          $( "#{{ parent.full }}__audio_status" ).prop( "disabled", true );
          $( "#{{ parent.full }}__participant_status" ).prop( "disabled", true );
          $( "#{{ parent.full }}_defer" ).button( { disabled : true } );
          $( "#{{ parent.full }}_reset" ).button( { disabled : true } );
          $( "#{{ parent.full }}_submit" ).button( { disabled : true } );
          $( "#{{ widget.full }}_add" ).button( { disabled : true } );
          $( "#{{ parent.full }}_next" ).button( { disabled : false } );
          $( "#{{ widget.full }}_delete" ).button( { disabled : true } );
          $( table_selector + " input:text" ).each( function() {
            $(this).prop( "disabled", true );
          } );
        } else {
          $( "#{{ parent.full }}_next" ).button( { disabled : !is_submitted } );

          // count the number of inputs, how many have text in them and which is the last
          // empty input ready to receive focus
          var numFilled = 0;
          var numInput = 0;
          var $firstEmpty = null;
          var complete_status =
            "unavailable" == "{{ audio_status }}" || "unusable" == "{{ audio_status }}" ||
            "refused" == "{{ participant_status }}";
          var null_status =
            "NULL" == "{{ audio_status }}" && "NULL" == "{{ participant_status }}";

          $( table_selector + " input:text" ).each( function() {
            if( 0 < $(this).val().length ) {
              numFilled++;
            } else {
              if( null === $firstEmpty ) {
                $(this).prop( "disabled", false );
                $firstEmpty = $(this);
              }
            }
            numInput++;
          } );

          // enable the submit button if at least one input is filled or the audio
          // and participant status indicate completion
          $("#{{ parent.full }}_submit").button( { disabled : !(complete_status || 0 < numFilled) } );

          // disable the reset button if there is nothing to reset
          $( "#{{ parent.full }}_reset" ).button( { disabled : null_status && 0 == numFilled } );

          // enable the add button if at least two inputs are filled
          $( "#{{ widget.full }}_add" ).button( { disabled : complete_status || numFilled < 2 } );

          // enable the delete button if at lease two inputs are filled
          $( "#{{ widget.full }}_delete" ).button( { disabled : complete_status || numFilled < 2 } );

          // disable all inputs depending on audio or participant status
          if( complete_status ) {
            $( table_selector + " input" ).each( function() {
              $(this).prop( "disabled", true );
            } );
          } else {
            if( null !== $firstEmpty && numFilled != numInput ) {
              $firstEmpty.focus();
            } else {
              $( table_selector + " input:text" ).last().blur();
            }
          }
        }
      }

      // overrides the default autocomplete filter function to search only from the beginning
      // of the string
      $.ui.autocomplete.filter = function ( array, term ) {
        var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( term ), "i" );
        return $.grep( array, function ( value ) {
          return matcher.test( value.label );
        } );
      };

      function get_text_complete() {
        var args = new Object();
        args["dictionary_id"] = {{ dictionary_id }};
        args["intrusion_dictionary_id"] = {{ intrusion_dictionary_id }};
        args["variant_dictionary_id"] = {{ variant_dictionary_id }};
        // words are determined according to test language restrictions
        args["test_entry_id"] = {{ parent.id }};
        args["words_only"] = 1;
        return $.map( ajax_pull( "word", "list", args ), function( value, key ) {
          return {
            label: value,
            value: key
          };
        } );
      }

      function update_input_list() {

        $( table_selector + " input:text" ).keypress( function( event ) {
          var keycode = event.keyCode ? event.keyCode : event.which;
          if( ( 13 == keycode || 9 == keycode ) && $(this).autocomplete('widget').is(':visible') ) {
            $(this).autocomplete('close');
            return false;
          }
        } ).autocomplete( {
          source: get_text_complete(),
          minLength: 1,
          delay: 0,
          select: function( event, ui ) {
            $(this).val( ui.item.label );
            $(this).attr( "value", ui.item.label );
            return false;
          },
          focus: function( event, ui ) {
            $(this).val( ui.item.label );
            $(this).attr( "value", ui.item.label );
            return false;
          },
          close: function( event, ui ) {
            var needle = $(this).val();
            var haystack = $(this).autocomplete("option").source;
            var key = null;
            for(var i in haystack) {
              if( needle === haystack[i].label ) {
                key = haystack[i].value;
                break;
              }
            }
            if( null === key ) return false;

            $(this).trigger( "change",  [ key ]  );
          }
        } ).change( function(event, obj) {
          // addresses focus event calling change
          if( undefined === obj ) {
            var needle = $(this).val();
            var haystack = $(this).autocomplete("option").source;
            for(var i in haystack) {
              if( needle === haystack[i].label ) {
                return false;
              }
            }
          }

          var candidate = $(this).val().trim().toLowerCase();
          // we've trimmed and lower-cased the candidate: update the UI
          $(this).val( candidate );
          // update input value to present state
          $(this).attr( "value", candidate );
          $(this).removeClass();
          if( 0 == candidate.length ) {
            alert( "Blank entries are not permitted" );
            $(this).focus();
            return false;
          }

          var args = new Object();
          var target_entry_id = parseInt( $(this).prop( "id" ).split( "__" )[0] );
          args.id = target_entry_id;
          var rank = parseInt( $(this).prop( "id" ).split( "__" )[1] );
          if( undefined !== obj ) {
            var columns = new Object();
            columns["word_id"] = obj;
            args.columns = columns;
          } else {
            args.candidate = candidate;
          }

          //push the edits
          if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {

            // determine what type of word this is along with its id
            args.id = {{ parent.id }};
            args.child_id = target_entry_id;

            var result = ajax_pull( "test_entry", "classify_word", args );
            $(this).addClass( result.classification );
            // if a variant, check and add the word if not in the autocomplete source
            if( "variant" == result.classification && undefined === obj ) {
              var text_selector = $( table_selector + " input:text" );
              var source = text_selector.autocomplete( "option", "source" );
              source.push( { label : result.word, value : result.word_id } );
              text_selector.autocomplete( "option", "source", source );
            }

            configure_ui();
          } else {
            // clear the text entry and re-focus
            alert( "Entry was not accepted, try again." );
            $(this).val( "" );
            $(this).attr( "value", "" );
            $(this).focus();
          }
        } );// end text input change

      }// end function update_input_list

      $( function () {

        update_input_list();
        configure_ui();

        $( "#{{ widget.full }}_add" ).button( {
          text: false,
          icons: { primary: "ui-icon-plusthick" }
          } ).click( function() {
          // create a new classification test entry
          var rank = parseInt(
            $( table_selector + " input:text" ).last().prop( "id" ).split("__")[1] ) + 1;
          var args = new Object();
          var columns =  new Object();
          columns["rank"] = rank;
          columns["test_entry_id"] = {{ parent.id }};
          args.columns = columns;
          if( ajax_push( "{{ widget.subject }}", "new", args ) ) {
            slot_refresh( {{ slot }} );
          }
        } );// end add button click

        $( "#{{ widget.full }}_delete" ).button( {
          text: false,
          icons: { primary: "ui-icon-closethick" }
          } )
        .click( function() {
          var max_rank = 1;
          var $text_input = null;
          $( table_selector + " input:text" ).each( function() {
             if( 0 < $(this).val().length ) {
               var rank = parseInt( $(this).prop( "id" ).split( "__" )[1] );
               if( rank > max_rank ) {
                 max_rank = rank;
                 $text_input = $(this);
               }
             }
          } );
          if( 1 == max_rank ) {
            alert( 'Deletion of last entry is not permitted, consider using Reset' );
            return false;
          }

          var args = new Object();
          var columns = new Object();
          args.id = parseInt( $text_input.prop( "id" ).split( "__" )[0] );
          columns["word_id"] = '';
          args.columns = columns;
          if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {
           $text_input.val( "" );
           $text_input.attr( "value", "" );
           $text_input.prop( "disabled", true );
           configure_ui();
          }
        } ); // end delete button click

      } );
    </script>

  {% endif %}

{% endblock javascript %}

{% block widget %}

  <div class="spacer"></div>

  <table id="{{ widget.full }}__entry_table">

    <tbody>
    {% if entry_data|length != 0 %}
      {% set numcell = 4 %}
      {% set kprev = 'true' %}
      {% set imax = entry_data|length-1 %}
      {% if numcell > imax %}
        {% set numcell = imax %}
      {% endif %}
      {% if numcell == 0 %}
        {% set numcell = 1 %}
      {% endif %}

      {% for i in range(0, imax, numcell) %}

        <tr>

        {% set kmax = i+numcell-1 %}
        {% if kmax > imax %}
          {% set kmax = imax %}
        {% endif %}
        {% for k in i..kmax %}

          {% set value = '' %}
          {% if entry_data[k].word_id is defined %}
            {% set value = entry_data[k].word %}
          {% endif %}
          {% set status = entry_data[k].word_id ? "word" : "empty" %}

          <td>
            <input type="text"
             id="{{ entry_data[ k ].id }}__{{ entry_data[ k ].rank }}"
             {% if entry_data[k].classification is defined %}
               class="{{ entry_data[k].classification }}"
             {% endif %}

             {% if editable == 0 %}
               { readonly }
             {% endif %}

             {% if status == 'empty'  %}
               {% if kprev == 'false' %}
                 { disabled }
               {% endif %}
               {% set kprev = 'false' %}
             {% elseif status == 'word' %}
                 {% set kprev = 'true' %}
             {% endif %}

             value="{{ value }}"/>
          </td>

        {% endfor %}

        </tr>

      {% endfor %}

      {% if editable == 1 %}
      <tr>
        <td colspan="{{ numcell }}" class="button">
          <button class="{{ widget.full }}__add_entry"
            style="float:right"
            id="{{ widget.full }}_add">Add</button>
          <button class="{{ widget.full }}__delete_entry"
            style="float:right"
            id="{{ widget.full }}_delete">Delete</button>
        </td>
      </tr>
      {% endif %}
    {% endif %}
    </tbody>
  </table>

{% endblock widget %}
