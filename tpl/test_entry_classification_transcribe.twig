{##
 # test_entry_classfication_transcribe.twig
 # 
 # Transcribe a classification type test.
 # @author Dean Inglis <inglisd@mcmaster.ca>
 # @see base_view.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}

  <script type="text/javascript">
  
    function configure_ui() {
      var disable = $( 'input:text[value!=""]' ).length == 0 && !{{ deferred }};
      $( "#{{ parent.full }}_Next" ).button( { disabled : disable } );

      // disable elements based on deferred status
      if( {{ deferred }} ) {
        $( "#{{ parent.full }}__audio_fault" ).attr( "disabled", "disabled" );
        $( "#{{ parent.full }}_Defer" ).button( { disabled :  true } );
        $( "#{{ parent.full }}_Reset" ).button( { disabled : true } );
        $( "#{{ widget.full }}__entry_table" ).find( "input" ).each( function() {
          $(this).attr( "disabled", "disabled" );
        } );
      } else {
        // set focus to the next empty input field
        $( 'input:text' ).each( function() {
          if( this.value === '' && !$(this).attr( "disabled" ) ) {
            this.focus();
            return false;
          }
        } );  
      }
    }

    // overrides the default autocomplete filter function to search only from the beginning
    // of the string
    $.ui.autocomplete.filter = function ( array, term ) {
      var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( term ), "i" );
      return $.grep( array, function ( value ) {
        return matcher.test( value.label || value.value || value );
      } );
    };

    function get_text_complete() {
      var args = new Object();
      args['dictionary_id'] = "{{ dictionary_id }}";
      args['language'] = "{{ language }}";
      args['words_only'] = 1;
      return ajax_pull( "word", "list", args );
    }

    $( function () {

      configure_ui();
      
      $( "#{{ widget.full }}__entry_table" ).find( "input:text" ).autocomplete( {
         source: get_text_complete(),
         minLength: 1,
         select: function( event, ui ) {
             $(this).val( ui.item.value );
             // TODO see if latest version of jquery has double enter key bug fixed
             //$(this).trigger( 'change' );
           }
         } ).change( function() {
        var args = new Object();
        var columns = new Object();
        args.id = $(this).attr("id").split("__")[0];
        columns["rank"] = $(this).attr("id").split("__")[1];
        columns["test_entry_id"] = "{{ parent.id }}";
        columns["word_id"] = "";
        columns["word_candidate"] = $(this).val();
        args.columns = columns;

        if( ajax_push( "{{ widget.subject }}", "edit", args ) ) {
          args.id = "{{ test_id }}";
          args['language'] = "{{ language }}";
          args['word_candidate'] = $(this).val();
          var classification = ajax_pull( "test", "classify_word", args );
          if( undefined != classification )
          {
            $(this).addClass( classification );
          }
          var next_rank_id = "__" + ( parseInt( columns['rank'] ) + 1 );
          $( 'input:text[id$="' + next_rank_id + '"]' ).removeAttr( "disabled" );

          configure_ui();
        }
      } );// end text input change

      $( "#{{ parent.full }}_Reset" ).click(function() {
        if( ajax_push( "{{ parent.subject }}", "reset", { "id": "{{ parent.id }}" } ) ) {
          input = $("#{{ widget.full }}__entry_table" ).find( "input:text" );
          input.each( function() {
              $(this).val( "" );
              $(this).removeClass( "primary candidate intrusion variant" );
              var rank = $(this).attr( "id" ).split("__")[1];
              if( rank == "1" ) {
                $(this).removeAttr( "disabled" );
              } else {
                $(this).attr( "disabled", "disabled" );
              }
          } );
          configure_ui();
        }
      } );// end Reset button click

    } );
  </script>

{% endblock javascript %}

{% block widget %}

  <div class="spacer">

  <table id="{{ widget.full }}__entry_table">

    <tbody>
    {% set numcell = 4 %}
    {% set kprev= 'true' %}
    {% for i in range(0, entry_data|length-1, numcell) %}
      <tr>
      {% set kmax = i+numcell-1 %}
      {% for k in i..kmax %}

        {% set value = '' %}
        {% if entry_data[k].word_id is defined %}
          {% set value = entry_data[k].word %}
        {% elseif entry_data[k].word_candidate is defined %}  
            {% set value = entry_data[k].word_candidate %}
        {% endif %}
        {% set status = entry_data[k].word_id ? "word" : 
                        entry_data[k].word_candidate ? "candidate" : "empty" %} 

        <td>
          <input type="text"
           id="{{ entry_data[ k ].id }}__{{ entry_data[ k ].rank }}"
           class="{{ entry_data[k].classification }}"
           
           {% if editable == false %}
             { readonly }
           {% endif %}

           {% if status == 'empty'  %} 
             {% if kprev == 'false' %}
               {{ "disabled" }}
             {% endif %}
             {% set kprev = 'false' %}
           {% elseif status == 'candidate' %}
               {% set kprev = 'true' %}
           {% elseif status == 'word' %}
               {% set kprev = 'true' %}
               
           {% endif %}
             
           value={{ value }}>
        </td>

      {% endfor %}

      </tr>

    {% endfor %}

    </tbody>
  </table>

{% endblock widget %}

